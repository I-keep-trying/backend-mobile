{"version":3,"sources":["assets/images/ua.svg","components/HeaderMobile.js"],"names":["HeaderNav","useState","value","setValue","activeItem","setActiveItem","name","activeSubregion","setActiveSubregion","id","region","subregions","setRegion","state","useSelector","recordsFound","countries","filtered","unit","dispatch","useDispatch","useEffect","handleInput","e","preventDefault","input","target","searchCountriesByName","handleSort","key","sortCountries","console","log","common","attached","inverted","borderless","Item","header","onClick","toggleMenu","alt","srcSet","flag","size","src","as","href","Menu","position","val","toggleUnit","color","vertical","fluid","icon","link","length","type","placeholder","onChange","labelPosition","basic","content","textAlign","item","inline","text","defaultValue","sortConfig","direction","regions","map","r","active","reg","filterCountriesByRegion","s","sub","filterCountriesBySubRegion"],"mappings":"28DAAe,QAA0B,gC,gMCyU1BA,UA/SG,WAChB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,OAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8CJ,mBAAS,CAAEK,KAAM,WAA/D,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4BP,mBAAS,CACnCQ,GAAI,wBACJC,OAAQ,MACRC,WAAY,KAHd,mBAAOD,EAAP,KAAeE,EAAf,KAMMC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAE/BE,EAAeD,aAAY,SAACD,GAAD,OAAWA,EAAMG,UAAUC,YAEtDC,EAAOJ,aAAY,SAACD,GAAD,OAAWA,EAAMK,KAAKA,QAEzCC,EAAWC,cAEjBC,qBAAU,WACM,KAAVnB,IACFU,EAAU,CACRH,GAAI,wBACJC,OAAQ,MACRC,WAAY,KAEdN,EAAc,UAEf,CAACH,IAEJ,IAAMoB,EAAc,SAACC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOxB,MACvBiB,EAASQ,YAAsBF,IAC/BtB,EAASsB,IAgBLG,EAAa,SAACC,GAClBV,EAASW,YAAcD,KAwBzB,OADAE,QAAQC,IAAI,eAAgBjB,EAAa,GAAGT,KAAK2B,QAE/C,qCACE,eAAC,IAAD,CAAMC,SAAS,MAAMC,UAAQ,EAACC,YAAU,EAAxC,UACE,cAAC,IAAKC,KAAN,CAAW5B,GAAG,YAAY6B,QAAM,EAACC,QAAS,WAnC9CpB,EAASqB,gBAmCL,SACE,mDAEF,cAAC,IAAKH,KAAN,CAAW5B,GAAG,YAAd,SACE,cAAC,IAAD,CACEgC,IAAI,eACJC,OAAM,UAAKC,IAAL,SACNC,KAAK,OACLC,IAAKF,IACLG,GAAG,IACHC,KAAK,qCAGT,cAAC,IAAKC,KAAN,CAAWC,SAAS,QAApB,SACE,cAAC,IAAKZ,KAAN,CACEE,QAAS,kBA/CCW,EAgDY,WAAThC,EAAoB,WAAa,cA/CtDC,EAASgC,YAAWD,IADH,IAACA,GA8CZ,SAKE,cAAC,IAAD,CAAOE,MAAM,OAAb,SACY,WAATlC,EAAoB,WAAa,kBAO1C,cAAC,IAAD,CAAMT,GAAG,gBAAgB0B,UAAQ,EAACkB,UAAQ,EAACC,OAAK,EAAhD,SACE,cAAC,IAAKjB,KAAN,CAAW5B,GAAG,qBAAd,SACE,cAAC,IAAD,CACE0B,UAAQ,EACRS,KAAK,OACLW,KACE,cAAC,IAAD,CACEC,MAAI,EACJlD,KAAMJ,EAAMuD,OAAS,EAAI,QAAU,SACnClB,QAASrC,EAAMuD,OAAS,EA7EnB,WACjBtC,EAASQ,YAAsB,KAC/BxB,EAAS,KA2E4CmB,IAG7CoC,KAAK,SACLxD,MAAOA,EACPyD,YAAY,iBACZC,SAAUtC,QAIhB,cAAC,IAAD,CAAMb,GAAG,iBAAiB0B,UAAQ,EAACkB,UAAQ,EAACC,OAAK,EAAjD,SACE,eAAC,IAAKjB,KAAN,CAAW5B,GAAG,sBAAd,UACGM,EAAa0C,OACW,IAAxB1C,EAAa0C,OAAe,gBAAkB,sBAK1B,IAAxB1C,EAAa0C,OACZ,mCACE,eAAC,IAAD,CAAStB,UAAQ,EAAjB,UACE,cAAC,IAAD,CACE0B,cAAc,OACdN,KAAK,eACLO,OAAK,EACLV,MAAM,SACNE,OAAK,EACLS,QAAQ,gBACRxB,QAAS,kBAAMpB,EAASQ,YAAsB,QAEhD,cAAC,IAAD,CAAQlB,GAAG,iBAAiBuD,UAAU,SAAtC,SACGjD,EAAa,GAAGT,KAAK2B,cAK5B,qCACE,eAAC,IAAD,CAAME,UAAQ,EAACC,YAAU,EAACQ,KAAK,OAA/B,UACE,cAAC,IAAD,CAAUqB,MAAI,EAACC,QAAM,EAACC,KAAK,OAAOC,aAAa,OAA/C,SACE,eAAC,IAASpB,KAAV,CAAevC,GAAG,gBAAlB,UACE,eAAC,IAAS4B,KAAV,CAAeE,QAAS,kBAAMX,EAAW,SAAzC,UACsC,SAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,UAcA,eAAC,IAASjC,KAAV,CAAeE,QAAS,kBAAMX,EAAW,YAAzC,UACsC,YAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,aAcA,eAAC,IAASjC,KAAV,CAAeE,QAAS,kBAAMX,EAAW,WAAzC,UACsC,WAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,YAcA,eAAC,IAASjC,KAAV,CAAeE,QAAS,kBAAMX,EAAW,cAAzC,UACsC,cAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,eAcA,eAAC,IAASjC,KAAV,CAAeE,QAAS,kBAAMX,EAAW,eAAzC,UACsC,eAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,gBAcA,eAAC,IAASjC,KAAV,CAAeE,QAAS,kBAAMX,EAAW,SAAzC,UACsC,SAAnCf,EAAMG,UAAUqD,WAAWxC,IAC1B,cAAC,IAAD,CACEvB,KAC2C,cAAzCO,EAAMG,UAAUqD,WAAWC,UACvB,WACA,eAIR,6BAVJ,eAiBJ,eAAC,IAAKjC,KAAN,CAAWY,SAAS,QAApB,wBACcpC,EAAMG,UAAUqD,WAAWxC,IACtC,KACAhB,EAAMG,UAAUqD,WAAWC,gBAIhC,eAAC,IAAD,CAAMnC,UAAQ,EAACC,YAAU,EAACQ,KAAK,OAA/B,UACE,cAAC,IAAD,CAAUqB,MAAI,EAACC,QAAM,EAACC,KAAK,SAA3B,SACE,cAAC,IAASnB,KAAV,UACGuB,EAAQC,KAAI,SAACC,GAAD,OACX,cAAC,IAASpC,KAAV,CAEE8B,KAAMM,EAAE/D,OACRR,MAAOuE,EAAE/D,OACTgE,OAAQtE,IAAeqE,EAAE/D,OACzB6B,QAAS,kBA3MAoC,EA2MwBF,EA1MjDtD,EAASyD,YAAwBD,EAAIjE,SACrCL,EAAcsE,EAAIjE,QACC,QAAfiE,EAAIjE,QACNF,EAAmB,CAAEF,KAAM,WAE7BM,EAAU+D,QACVxE,EAAS,IAPe,IAACwE,IAuMJF,EAAEhE,WASf,eAAC,IAAK4B,KAAN,CAAWY,SAAS,QAApB,0BACgB7C,QAMC,QAAlBM,EAAOA,OACN,eAAC,IAAD,CAAMyB,UAAQ,EAACC,YAAU,EAACQ,KAAK,OAA/B,UACE,cAAC,IAAD,CAAUqB,MAAI,EAACC,QAAM,EAACC,KAAK,YAA3B,SACE,cAAC,IAASnB,KAAV,UACGtC,EAAOC,WAAW6D,KAAI,SAACK,GAAD,OACrB,cAAC,IAASxC,KAAV,CAEE8B,KAAMU,EAAEvE,KACRJ,MAAO2E,EAAEvE,KACToE,OAAQnE,EAAgBD,OAASuE,EAAEvE,KACnCiC,QAAS,kBAvNCuC,EAuN0BD,EAAEvE,KAtNxDa,EAAS4D,YAA2BD,IACpCtE,EAAmB,CAAEF,KAAMwE,SAC3B3E,EAAS,IAHkB,IAAC2E,IAmNLD,EAAEpE,WASf,cAAC,IAAK4B,KAAN,CAAWY,SAAS,QAApB,SAC4B,WAAzB1C,EAAgBD,KACf,eAAC,IAAD,WACGC,EAAgBD,KACjB,cAAC,IAAD,CAAMiC,QAAS,kBAzN/B/B,EAAmB,CAAEF,KAAM,gBAC3Ba,EAASyD,YAAwBlE,EAAOA,UAwNeJ,KAAK,WAAY,OAG1D,QAKN","file":"static/js/12.18b9aea2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ua.8a140163.svg\";","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Menu,\r\n  Icon,\r\n  Input,\r\n  Label,\r\n  Dropdown,\r\n  Button,\r\n  Segment,\r\n  Image,\r\n  Header,\r\n} from 'semantic-ui-react'\r\nimport {\r\n  toggleUnit,\r\n  toggleMenu,\r\n  searchCountriesByName,\r\n  sortCountries,\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubRegion,\r\n} from '../reducers/countriesReducer'\r\nimport regions from '../regions'\r\n\r\nimport '../assets/css/App.css'\r\nimport flag from '../assets/images/ua.svg'\r\n\r\nconst HeaderNav = () => {\r\n  const [value, setValue] = useState('')\r\n  const [activeItem, setActiveItem] = useState('All')\r\n  const [activeSubregion, setActiveSubregion] = useState({ name: 'Select' })\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const state = useSelector((state) => state)\r\n\r\n  const recordsFound = useSelector((state) => state.countries.filtered)\r\n\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (value !== '') {\r\n      setRegion({\r\n        id: 'FZUe47mEY9PCOzYmMxzYY',\r\n        region: 'All',\r\n        subregions: [],\r\n      })\r\n      setActiveItem('All')\r\n    }\r\n  }, [value])\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    const input = e.target.value\r\n    dispatch(searchCountriesByName(input))\r\n    setValue(input)\r\n  }\r\n\r\n  const clearInput = () => {\r\n    dispatch(searchCountriesByName(''))\r\n    setValue('')\r\n  }\r\n\r\n  const showHideMenu = () => {\r\n    dispatch(toggleMenu())\r\n  }\r\n\r\n  const changeUnit = (val) => {\r\n    dispatch(toggleUnit(val))\r\n  }\r\n\r\n  const handleSort = (key) => {\r\n    dispatch(sortCountries(key))\r\n  }\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg.region))\r\n    setActiveItem(reg.region)\r\n    if (reg.region === 'All') {\r\n      setActiveSubregion({ name: 'Select' })\r\n    }\r\n    setRegion(reg)\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n    setActiveSubregion({ name: sub })\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubClose = () => {\r\n    setActiveSubregion({ name: 'Select' })\r\n    dispatch(filterCountriesByRegion(region.region))\r\n  }\r\n  console.log('recordsFound', recordsFound[0].name.common)\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\" inverted borderless>\r\n        <Menu.Item id=\"app-title\" header onClick={() => showHideMenu()}>\r\n          <p> World Countries</p>\r\n        </Menu.Item>\r\n        <Menu.Item id=\"flag-menu\">\r\n          <Image\r\n            alt=\"ukraine flag\"\r\n            srcSet={`${flag} 100w`}\r\n            size=\"tiny\"\r\n            src={flag}\r\n            as=\"a\"\r\n            href=\"https://supportukrainenow.org/\"\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            onClick={() =>\r\n              changeUnit(unit === 'metric' ? 'imperial' : 'metric')\r\n            }\r\n          >\r\n            <Label color=\"blue\">\r\n              {unit === 'metric' ? 'imperial' : 'metric'}\r\n            </Label>\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n      </Menu>\r\n\r\n      {/* text input */}\r\n      <Menu id=\"mobile-header\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header-item\">\r\n          <Input\r\n            inverted\r\n            size=\"mini\"\r\n            icon={\r\n              <Icon\r\n                link\r\n                name={value.length > 0 ? 'close' : 'search'}\r\n                onClick={value.length > 0 ? clearInput : handleInput}\r\n              />\r\n            }\r\n            type=\"search\"\r\n            value={value}\r\n            placeholder=\"Search by name\"\r\n            onChange={handleInput}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Menu id=\"mobile-header2\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header2-item\">\r\n          {recordsFound.length}\r\n          {recordsFound.length === 1 ? ' record found' : ' records found'}\r\n        </Menu.Item>\r\n      </Menu>\r\n\r\n      {/* sort menu */}\r\n      {recordsFound.length === 1 ? (\r\n        <>\r\n          <Segment inverted>\r\n            <Button\r\n              labelPosition=\"left\"\r\n              icon=\"left chevron\"\r\n              basic\r\n              color=\"yellow\"\r\n              fluid\r\n              content=\"All Countries\"\r\n              onClick={() => dispatch(searchCountriesByName(''))}\r\n            ></Button>\r\n            <Header id=\"country-header\" textAlign=\"center\">\r\n              {recordsFound[0].name.common}\r\n            </Header>\r\n          </Segment>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Menu inverted borderless size=\"tiny\">\r\n            <Dropdown item inline text=\"Sort\" defaultValue=\"Name\">\r\n              <Dropdown.Menu id=\"dropdown menu\">\r\n                <Dropdown.Item onClick={() => handleSort('name')}>\r\n                  {state.countries.sortConfig.key === 'name' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Name\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('capital')}>\r\n                  {state.countries.sortConfig.key === 'capital' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Capital\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('region')}>\r\n                  {state.countries.sortConfig.key === 'region' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Region\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('subregion')}>\r\n                  {state.countries.sortConfig.key === 'subregion' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Subregion\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('population')}>\r\n                  {state.countries.sortConfig.key === 'population' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Population\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('area')}>\r\n                  {state.countries.sortConfig.key === 'area' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Area\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <Menu.Item position=\"right\">\r\n              Sorted by: {state.countries.sortConfig.key}\r\n              {', '}\r\n              {state.countries.sortConfig.direction}\r\n            </Menu.Item>\r\n          </Menu>\r\n\r\n          <Menu inverted borderless size=\"tiny\">\r\n            <Dropdown item inline text=\"Filter\">\r\n              <Dropdown.Menu>\r\n                {regions.map((r) => (\r\n                  <Dropdown.Item\r\n                    key={r.id}\r\n                    text={r.region}\r\n                    value={r.region}\r\n                    active={activeItem === r.region}\r\n                    onClick={() => handleRegionClick(r)}\r\n                  />\r\n                ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Menu.Item position=\"right\">\r\n              Filtered by: {activeItem}\r\n              {/*   {activeSubregion.name !== 'Select'\r\n                ? `, ${activeSubregion.name}`\r\n                : ''} */}\r\n            </Menu.Item>\r\n          </Menu>\r\n          {region.region !== 'All' ? (\r\n            <Menu inverted borderless size=\"tiny\">\r\n              <Dropdown item inline text=\"Subregion\">\r\n                <Dropdown.Menu>\r\n                  {region.subregions.map((s) => (\r\n                    <Dropdown.Item\r\n                      key={s.id}\r\n                      text={s.name}\r\n                      value={s.name}\r\n                      active={activeSubregion.name === s.name}\r\n                      onClick={() => handleSubregionClick(s.name)}\r\n                    />\r\n                  ))}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Menu.Item position=\"right\">\r\n                {activeSubregion.name !== 'Select' ? (\r\n                  <Label>\r\n                    {activeSubregion.name}\r\n                    <Icon onClick={() => handleSubClose()} name=\"delete\" />{' '}\r\n                  </Label>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </Menu.Item>\r\n            </Menu>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeaderNav\r\n"],"sourceRoot":""}